# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inventory_pb2 as inventory__pb2


class InventoryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateProduct = channel.unary_unary(
                '/inventory.InventoryService/CreateProduct',
                request_serializer=inventory__pb2.CreateProductRequest.SerializeToString,
                response_deserializer=inventory__pb2.Product.FromString,
                )
        self.CreateProductStock = channel.unary_unary(
                '/inventory.InventoryService/CreateProductStock',
                request_serializer=inventory__pb2.CreateProductStockRequest.SerializeToString,
                response_deserializer=inventory__pb2.ProductStock.FromString,
                )
        self.ListProductStocks = channel.unary_stream(
                '/inventory.InventoryService/ListProductStocks',
                request_serializer=inventory__pb2.ProductIdRequest.SerializeToString,
                response_deserializer=inventory__pb2.ProductStock.FromString,
                )
        self.AddStockCount = channel.unary_unary(
                '/inventory.InventoryService/AddStockCount',
                request_serializer=inventory__pb2.AddStockGivenSkuRequest.SerializeToString,
                response_deserializer=inventory__pb2.StockCountTransaction.FromString,
                )
        self.GetInventoryBySku = channel.unary_unary(
                '/inventory.InventoryService/GetInventoryBySku',
                request_serializer=inventory__pb2.GetInventoryBySkuRequest.SerializeToString,
                response_deserializer=inventory__pb2.Inventory.FromString,
                )
        self.GetInventoryByProductId = channel.unary_unary(
                '/inventory.InventoryService/GetInventoryByProductId',
                request_serializer=inventory__pb2.GetInventoryByProductIdRequest.SerializeToString,
                response_deserializer=inventory__pb2.ListInventoryResponse.FromString,
                )
        self.ListInventory = channel.unary_stream(
                '/inventory.InventoryService/ListInventory',
                request_serializer=inventory__pb2.ListInventoryRequest.SerializeToString,
                response_deserializer=inventory__pb2.Inventory.FromString,
                )


class InventoryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateProduct(self, request, context):
        """Create a new product.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProductStock(self, request, context):
        """Create new product sku
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProductStocks(self, request, context):
        """Return a list sku's for a given product ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddStockCount(self, request, context):
        """Adds stock count for a given SKU.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInventoryBySku(self, request, context):
        """Returns the inventory for a given SKU.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInventoryByProductId(self, request, context):
        """Returns a list of inventory for a given product ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListInventory(self, request, context):
        """Returns a stream of all inventory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InventoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProduct,
                    request_deserializer=inventory__pb2.CreateProductRequest.FromString,
                    response_serializer=inventory__pb2.Product.SerializeToString,
            ),
            'CreateProductStock': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProductStock,
                    request_deserializer=inventory__pb2.CreateProductStockRequest.FromString,
                    response_serializer=inventory__pb2.ProductStock.SerializeToString,
            ),
            'ListProductStocks': grpc.unary_stream_rpc_method_handler(
                    servicer.ListProductStocks,
                    request_deserializer=inventory__pb2.ProductIdRequest.FromString,
                    response_serializer=inventory__pb2.ProductStock.SerializeToString,
            ),
            'AddStockCount': grpc.unary_unary_rpc_method_handler(
                    servicer.AddStockCount,
                    request_deserializer=inventory__pb2.AddStockGivenSkuRequest.FromString,
                    response_serializer=inventory__pb2.StockCountTransaction.SerializeToString,
            ),
            'GetInventoryBySku': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInventoryBySku,
                    request_deserializer=inventory__pb2.GetInventoryBySkuRequest.FromString,
                    response_serializer=inventory__pb2.Inventory.SerializeToString,
            ),
            'GetInventoryByProductId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInventoryByProductId,
                    request_deserializer=inventory__pb2.GetInventoryByProductIdRequest.FromString,
                    response_serializer=inventory__pb2.ListInventoryResponse.SerializeToString,
            ),
            'ListInventory': grpc.unary_stream_rpc_method_handler(
                    servicer.ListInventory,
                    request_deserializer=inventory__pb2.ListInventoryRequest.FromString,
                    response_serializer=inventory__pb2.Inventory.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inventory.InventoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InventoryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/CreateProduct',
            inventory__pb2.CreateProductRequest.SerializeToString,
            inventory__pb2.Product.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateProductStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/CreateProductStock',
            inventory__pb2.CreateProductStockRequest.SerializeToString,
            inventory__pb2.ProductStock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProductStocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/inventory.InventoryService/ListProductStocks',
            inventory__pb2.ProductIdRequest.SerializeToString,
            inventory__pb2.ProductStock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddStockCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/AddStockCount',
            inventory__pb2.AddStockGivenSkuRequest.SerializeToString,
            inventory__pb2.StockCountTransaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInventoryBySku(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/GetInventoryBySku',
            inventory__pb2.GetInventoryBySkuRequest.SerializeToString,
            inventory__pb2.Inventory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInventoryByProductId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/GetInventoryByProductId',
            inventory__pb2.GetInventoryByProductIdRequest.SerializeToString,
            inventory__pb2.ListInventoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListInventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/inventory.InventoryService/ListInventory',
            inventory__pb2.ListInventoryRequest.SerializeToString,
            inventory__pb2.Inventory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
